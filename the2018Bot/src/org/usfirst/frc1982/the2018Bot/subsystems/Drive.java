// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1982.the2018Bot.subsystems;

import org.usfirst.frc1982.the2018Bot.RobotMap;
import org.usfirst.frc1982.the2018Bot.commands.driveEnable;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX right = RobotMap.driveRight;
    private final WPI_TalonSRX left = RobotMap.driveLeft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    private final DifferentialDrive driveTrain = RobotMap.driveTrain;
//    public final double inchesPerPulse = 6*Math.PI/4096/5.4;//1.8/2.0/1.29;
    public final double LeftInchesPerPulse = 1 / 1794.2222;
    public final double RightInchesPerPulse = 1 / 1683.25;
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new driveEnable());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	
    	//controlling of slave motors:
//    	leftSlave.set(left.getMotorOutputPercent());
//    	rightSlave.set(right.getMotorOutputPercent());
    	
//    	encoder reading stuffs
    	double val = right.getSelectedSensorPosition(0);
    	SmartDashboard.putNumber("Right side Encoder", val);
    	val = left.getSelectedSensorPosition(0);
    	SmartDashboard.putNumber("left Side Encoder", val);
    	
//    	SmartDashboard.putNumber("Inches travelled", inchesPerPulse*val);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
//    public void TankDrive(double leftSpeed, double rightSpeed) {
//    	left.set(ControlMode.PercentOutput, leftSpeed);
//    	right.set(ControlMode.PercentOutput, rightSpeed);
////    	leftSlave.set(leftSpeed);
////    	rightSlave.set(rightSpeed);
//    }
    
}

