// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1982.the2018Bot;

//import org.frc1982.common.Side;
//import org.frc1982.common.AutoChooser;
//import org.frc1982.common.Goal;
//import org.frc1982.common.Position;
//import org.frc1982.common.Side;
import org.usfirst.frc1982.the2018Bot.subsystems.Claw;
import org.usfirst.frc1982.the2018Bot.subsystems.Drive;
import org.usfirst.frc1982.the2018Bot.subsystems.DrivePneumatics;
import org.usfirst.frc1982.the2018Bot.subsystems.Elevator;
import org.usfirst.frc1982.the2018Bot.commands._AutoFarLine;
import org.usfirst.frc1982.the2018Bot.commands._AutoSLeftGSwLeft;
import org.usfirst.frc1982.the2018Bot.commands._AutoSRightGSwRight;
import org.frc1982.common.Side;
import org.usfirst.frc1982.the2018Bot.commands._AutoDoNothing;
import org.usfirst.frc1982.the2018Bot.commands._AutoLineCross;
import org.usfirst.frc1982.the2018Bot.commands._AutoSMidGSwLeft;
import org.usfirst.frc1982.the2018Bot.commands._AutoSMidGSwRight;

import com.ctre.phoenix.motorcontrol.NeutralMode;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    public static ADIS16448_IMU gyro;
    public static boolean gyroValid;
    public static boolean useGyroForAuto = true;
    public static final int max_velocity = 25;

    public static OI oi;
    public static Drive drive;
    public static DrivePneumatics pneumatics;
    public static Claw claw;
    public static Elevator elevator;
    SendableChooser<Position> StartPos= new SendableChooser<>();


    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        drive = new Drive();
        pneumatics = new DrivePneumatics();
        claw = new Claw();
        elevator = new Elevator();
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        gyro = new ADIS16448_IMU();
        gyro.reset();
        
        RobotMap.driveRight.setNeutralMode(NeutralMode.Brake);
        RobotMap.driveLeft.setNeutralMode(NeutralMode.Brake);
        
        CameraServer.getInstance().startAutomaticCapture();
        
        StartPos.addDefault("Middle", Position.MID);
        StartPos.addObject("Left", Position.LEFT);
        StartPos.addObject("Right", Position.RIGHT);
        
//        PowerDistributionPanel pdp = new PowerDistributionPanel();
//        SmartDashboard.putData(pdp);
        
        SmartDashboard.putData("Start Position", StartPos);
        SmartDashboard.putBoolean("Do Switch?", true);
        SmartDashboard.putBoolean("Do Scale?", true);
        SmartDashboard.putBoolean("Do Line?", true);
        SmartDashboard.putBoolean("Prioritize switch?", false);
        SmartDashboard.putBoolean("Test Auto?", false);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    }
    
    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        parseGameData(DriverStation.getInstance().getGameSpecificMessage());
    }

    private Goal goal;
    private Side targetSide;
    private char startingPos;
    
    public boolean parseGameData(String GameData) {
    	//delete once wyatt makes the thing
    	if (oi.opBox.getRawButton(5)) {//StartPos.getSelected() == Position.LEFT) {
    		startingPos = 'L';
    	} else if (oi.opBox.getRawButton(4)) {//StartPos.getSelected() == Position.RIGHT) {
    		startingPos = 'R';
    	} else {
    		startingPos = 'M';
    	}
    	boolean switchSwSc = true;//= SmartDashboard.getBoolean("Prioritize switch?", false);
    	boolean Sw = oi.opBox.getRawButton(2);//= SmartDashboard.getBoolean("Do Switch?", false);
    	boolean Sc = oi.opBox.getRawButton(3);//= SmartDashboard.getBoolean("Do Scale?", false);
    	boolean Line = oi.opBox.getRawButton(1);//= SmartDashboard.getBoolean("Do Line?", false);
    	//if the gamedata actually has something useful:
    	if (GameData.length() > 0) {
    		System.out.println("GameData: " + GameData);
    		if (!switchSwSc) { //if we are following the normal priority list:
    			if (Sc && GameData.charAt(1) == startingPos) {
    				goal = Goal.SCALE;
    				if (startingPos == 'L') targetSide = Side.LEFT;
    				else if (startingPos == 'R') targetSide = Side.RIGHT;
    				return true;
    			} else if (Sw && ((startingPos == 'M') || (startingPos == GameData.charAt(0)))) {
    				goal = Goal.SWITCH;
   					if (GameData.charAt(0) == 'L') targetSide = Side.LEFT;
   					else if (GameData.charAt(0) == 'R') targetSide = Side.RIGHT;
    				return true;
    			} else if (Line) {
    				goal = Goal.LINE;
    				return true;
    			} else {
    				goal = Goal.NOTHING;
    				return true;
    			}
    		} else { //if we are switching the switch (heh) and scale position in the priority list
    			if (Sw && ((startingPos == 'M') || (startingPos == GameData.charAt(0)))) {
    				goal = Goal.SWITCH;
    				if (GameData.charAt(0) == 'L') targetSide = Side.LEFT;
    				else if (GameData.charAt(0) == 'R') targetSide = Side.RIGHT;
    				return true;
    			} else if (Sc && GameData.charAt(1) == startingPos) {
    				goal = Goal.SCALE;
    				if (startingPos == 'L') targetSide = Side.LEFT;
    				else if (startingPos == 'R') targetSide = Side.RIGHT;
    				return true;
    			} else if (Line) {
    				goal = Goal.LINE;
    				return true;
    			} else {
    				goal = Goal.NOTHING;
    				return true;
    			}
    			
    		}
    	}
    	return false;
    }
    
    @Override
    public void autonomousInit() {
////    	RobotMap.pneumaticsGearShifter.set();
//    	parsedCorrectly = parseGameData(DriverStation.getInstance().getGameSpecificMessage());
//    	if (!oi.driver.getRawButton(11) && parsedCorrectly) {
//    		System.out.println("Not testing auto, running already done auto");
//    		Position start;
//    		if (Robot.oi.opBox.getRawButton(5)) {
//    			start = Position.LEFT;
//    		} else if (Robot.oi.opBox.getRawButton(4)) {
//    			start = Position.RIGHT;
//    		} else {
//    			start = Position.MID;
//    		}
//    		if (start == Position.MID && goal == Goal.SWITCH) {
//    			if (targetSide == Side.LEFT) {
//    				System.out.println("doing _AutoSMIdGSwLeft");
//    				autonomousCommand = new _AutoSMidGSwLeft();
//    			} else {
//    				System.out.println("Doing _AutoSMidGSwRight");
//    				autonomousCommand = new _AutoSMidGSwRight();
//    			}
//    		} else {
//    			autonomousCommand = new _AutoGeneral(AutoChooser.getAutoPath(start, goal, targetSide), goal);
//    		}
//    	} else if (oi.driver.getRawButton(11)) {
//    		autonomousCommand = new AutoWaypointTest();
//    	}
    	
    	
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) {// && (parsedCorrectly || oi.driver.getRawButton(11))) {
        	System.out.println("auto Should begin running now");
        	autonomousCommand.start();
        }
    }

  //uses startingPos, goal, and targetSide
    private Command getAuto() {
    	switch(goal) {
    	case SWITCH:
    		//goal is switch:
    		if (startingPos == 'M') {
    			//starting in middle:
    			if (targetSide == Side.LEFT) {
    				System.out.println("AutoSMidGSwLeft");
    				return new _AutoSMidGSwLeft();
    			} else {
    				System.out.println("AutoSMidGSwRight");
    				return new _AutoSMidGSwRight();
    			}
    		} else if (startingPos == 'L') {
    			//starting on the left:
    			if (targetSide == Side.LEFT) {
    				System.out.println("AutoSLeftGSwLeft");
    				return new _AutoSLeftGSwLeft();
    			} else {
    				System.out.println("AutoFarLineCross");
    				return new _AutoFarLine();
    			}
    		} else {
    			//starting on the right:
    			if (targetSide==Side.RIGHT) {
    				System.out.println("AutoSRightSwRight");
    				return new _AutoSRightGSwRight();
    			} else {
    				System.out.println("AutoFarLineCross");
    				return new _AutoFarLine();
    			}
    		}
    	case SCALE:
    		System.out.println("Goal is scale; not running auto, you done goofed");
    		break;
    	case LINE:
    		System.out.println("Running Auto Line Cross");
    		return new _AutoLineCross();
		default:
			System.out.println("Doing nothing");
    		return new _AutoDoNothing();
    	}
    	return new _AutoDoNothing();
    }
    
    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
//        if (!parsedCorrectly && !oi.driver.getRawButton(11)) {
//        	parsedCorreclt = parseGameData(DriverStation.getInstance().getGameSpecificMessage());
//        	if (parsedCorrectly) {
//        		autonomousCommand = new _AutoGeneral(AutoChooser.getAutoPath(StartPos.getSelected(), goal, targetSide), goal);
//        		autonomousCommand.start();
//        	}
//        }
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
//        RobotMap.pneumaticsGearShifter.set(DoubleSolenoid.Value.kReverse);
//        RobotMap.elevatorRight.setSelectedSensorPosition(0, 0, 0);
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Gyro Angle", gyro.getAngleZ()/4);
    }
}
